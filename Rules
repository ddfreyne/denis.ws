#!/usr/bin/env ruby

### Preprocessing rules ######################################################

preprocess do

  def hide_assets
    items.each do |item|
      if item.identifier =~ /^\/assets/
        item[:is_hidden] = true
      end
    end
  end

  def generate_quick_reviews
    groups = items['/reviews/'][:quick_reviews]
    groups.each_pair do |subtype, quick_reviews|
      quick_reviews.each_pair do |title, rating|
        attributes = {
          :title      => title.to_s,
          :subtype    => subtype.to_s,
          :rating     => rating,
          :is_partial => true,
        }
        identifier = "/reviews/#{title.to_s.downcase.gsub(/[^a-z]+/, '-')}"
        items << Nanoc3::Item.new('', attributes, identifier)
      end
    end
  end

  def delete_drafts
    items.delete_if { |i| i[:is_draft] }
  end

  def convert_dates
    items.each do |i|
      if i[:published_on]
        i[:published_on] = Date.parse(i[:published_on])
      end
    end
  end

  def assign_cachebuster_id
    parts = %w( screen print )
    parts.each do |part|
      stylesheet = @items["/assets/style/#{part}/"]
      stylesheet[:cbid] = stylesheet.raw_content.checksum
    end
  end

  hide_assets
  generate_quick_reviews
  delete_drafts
  convert_dates
  assign_cachebuster_id

end

### Compilation + routing rules ##############################################

# 404

compile '/404/' do
  filter :erb
end

route '/404/' do
  '/error/404.php'
end

# sitemap

compile '/sitemap_xml/' do
  filter :erb
end

route '/sitemap_xml/' do
  '/sitemap.xml'
end

# assets

compile '/assets/style/*/' do
  filter :sass, :syntax => :scss, :style => :compressed
  filter :relativize_paths, :type => :css
end

compile '/assets/*/' do
end

route '/assets/*/' do
  cbid_part = item[:cbid] ? '-' + item[:cbid] : ''
  item.identifier.chop + cbid_part + '.' + item[:extension]
end

# other

compile '*' do
  next if item[:is_partial]

  if item[:markdown]
    filter :rdiscount
  end

  if item[:is_dynamic]
    filter :erb
  end

  if item[:has_code]
    filter :colorize_syntax, :default_colorizer => :pygmentsrb
  end

  case @item[:kind]
  when 'review'
    layout 'review'
  else
    layout 'page'
  end
  layout 'default'

  filter :rubypants
  filter :relativize_paths, :type => :html
end

route '*' do
  if item[:is_partial]
    nil
  else
    item.identifier + 'index.html'
  end
end

### Layouting rules ##########################################################

layout '*', :erb
